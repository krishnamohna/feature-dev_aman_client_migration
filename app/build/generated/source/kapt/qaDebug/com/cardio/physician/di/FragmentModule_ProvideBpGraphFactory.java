// Generated by Dagger (https://dagger.dev).
package com.cardio.physician.di;

import com.cardio.physician.ui.views.dashboard.common.graph.BpBarMpChartGraphImp;
import com.cardio.physician.ui.views.dashboard.common.graph.base.BpGraph;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class FragmentModule_ProvideBpGraphFactory implements Factory<BpGraph> {
  private final FragmentModule module;

  private final Provider<BpBarMpChartGraphImp> charImpProvider;

  public FragmentModule_ProvideBpGraphFactory(FragmentModule module,
      Provider<BpBarMpChartGraphImp> charImpProvider) {
    this.module = module;
    this.charImpProvider = charImpProvider;
  }

  @Override
  public BpGraph get() {
    return provideBpGraph(module, charImpProvider.get());
  }

  public static FragmentModule_ProvideBpGraphFactory create(FragmentModule module,
      Provider<BpBarMpChartGraphImp> charImpProvider) {
    return new FragmentModule_ProvideBpGraphFactory(module, charImpProvider);
  }

  public static BpGraph provideBpGraph(FragmentModule instance, BpBarMpChartGraphImp charImp) {
    return Preconditions.checkNotNullFromProvides(instance.provideBpGraph(charImp));
  }
}
