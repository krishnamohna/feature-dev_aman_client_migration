// Generated by Dagger (https://dagger.dev).
package com.cardio.physician.ui.views.dashboard.fragment;

import com.cardio.physician.data.local.UserManager;
import com.cardio.physician.ui.views.dashboard.common.graph.base.BpGraph;
import com.cardio.physician.ui.views.dashboard.common.graph.base.HeartRateGraph;
import com.cardio.physician.ui.views.dashboard.common.graph.base.StepCountGraph;
import com.cardio.physician.ui.views.dashboard.common.graph.base.WeightGraph;
import dagger.MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.InjectedFieldSignature;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DashboardFragment_MembersInjector implements MembersInjector<DashboardFragment> {
  private final Provider<WeightGraph> weightGraphProvider;

  private final Provider<StepCountGraph> stepCountGraphProvider;

  private final Provider<HeartRateGraph> heartRateGraphProvider;

  private final Provider<UserManager> userManagerProvider;

  private final Provider<BpGraph> bpGraphProvider;

  public DashboardFragment_MembersInjector(Provider<WeightGraph> weightGraphProvider,
      Provider<StepCountGraph> stepCountGraphProvider,
      Provider<HeartRateGraph> heartRateGraphProvider, Provider<UserManager> userManagerProvider,
      Provider<BpGraph> bpGraphProvider) {
    this.weightGraphProvider = weightGraphProvider;
    this.stepCountGraphProvider = stepCountGraphProvider;
    this.heartRateGraphProvider = heartRateGraphProvider;
    this.userManagerProvider = userManagerProvider;
    this.bpGraphProvider = bpGraphProvider;
  }

  public static MembersInjector<DashboardFragment> create(Provider<WeightGraph> weightGraphProvider,
      Provider<StepCountGraph> stepCountGraphProvider,
      Provider<HeartRateGraph> heartRateGraphProvider, Provider<UserManager> userManagerProvider,
      Provider<BpGraph> bpGraphProvider) {
    return new DashboardFragment_MembersInjector(weightGraphProvider, stepCountGraphProvider, heartRateGraphProvider, userManagerProvider, bpGraphProvider);
  }

  @Override
  public void injectMembers(DashboardFragment instance) {
    injectWeightGraph(instance, weightGraphProvider.get());
    injectStepCountGraph(instance, stepCountGraphProvider.get());
    injectHeartRateGraph(instance, heartRateGraphProvider.get());
    injectUserManager(instance, userManagerProvider.get());
    injectBpGraph(instance, bpGraphProvider.get());
  }

  @InjectedFieldSignature("com.cardio.physician.ui.views.dashboard.fragment.DashboardFragment.weightGraph")
  public static void injectWeightGraph(DashboardFragment instance, WeightGraph weightGraph) {
    instance.weightGraph = weightGraph;
  }

  @InjectedFieldSignature("com.cardio.physician.ui.views.dashboard.fragment.DashboardFragment.stepCountGraph")
  public static void injectStepCountGraph(DashboardFragment instance,
      StepCountGraph stepCountGraph) {
    instance.stepCountGraph = stepCountGraph;
  }

  @InjectedFieldSignature("com.cardio.physician.ui.views.dashboard.fragment.DashboardFragment.heartRateGraph")
  public static void injectHeartRateGraph(DashboardFragment instance,
      HeartRateGraph heartRateGraph) {
    instance.heartRateGraph = heartRateGraph;
  }

  @InjectedFieldSignature("com.cardio.physician.ui.views.dashboard.fragment.DashboardFragment.userManager")
  public static void injectUserManager(DashboardFragment instance, UserManager userManager) {
    instance.userManager = userManager;
  }

  @InjectedFieldSignature("com.cardio.physician.ui.views.dashboard.fragment.DashboardFragment.bpGraph")
  public static void injectBpGraph(DashboardFragment instance, BpGraph bpGraph) {
    instance.bpGraph = bpGraph;
  }
}
