// Generated by Dagger (https://dagger.dev).
package com.cardio.physician.ui.views.diagnosis.step1;

import com.cardio.physician.data.remote.profile.UserProfileRepository;
import com.cardio.physician.domain.connection.ConnectionRepo;
import com.cardio.physician.domain.diagnosis.DiagnosisRepo;
import com.cardio.physician.domain.notifications.NotificationRepo;
import com.cardio.physician.ui.common.utils.validation.Validater;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DiagnosisViewStep1ViewModel_Factory implements Factory<DiagnosisViewStep1ViewModel> {
  private final Provider<Validater> validaterProvider;

  private final Provider<Validater> validaterAlphaProvider;

  private final Provider<UserProfileRepository> userProfileRepositoryProvider;

  private final Provider<DiagnosisRepo> diagnosisRepoProvider;

  private final Provider<ConnectionRepo> connectionRepoProvider;

  private final Provider<NotificationRepo> notificationRepoProvider;

  public DiagnosisViewStep1ViewModel_Factory(Provider<Validater> validaterProvider,
      Provider<Validater> validaterAlphaProvider,
      Provider<UserProfileRepository> userProfileRepositoryProvider,
      Provider<DiagnosisRepo> diagnosisRepoProvider,
      Provider<ConnectionRepo> connectionRepoProvider,
      Provider<NotificationRepo> notificationRepoProvider) {
    this.validaterProvider = validaterProvider;
    this.validaterAlphaProvider = validaterAlphaProvider;
    this.userProfileRepositoryProvider = userProfileRepositoryProvider;
    this.diagnosisRepoProvider = diagnosisRepoProvider;
    this.connectionRepoProvider = connectionRepoProvider;
    this.notificationRepoProvider = notificationRepoProvider;
  }

  @Override
  public DiagnosisViewStep1ViewModel get() {
    return newInstance(validaterProvider.get(), validaterAlphaProvider.get(), userProfileRepositoryProvider.get(), diagnosisRepoProvider.get(), connectionRepoProvider.get(), notificationRepoProvider.get());
  }

  public static DiagnosisViewStep1ViewModel_Factory create(Provider<Validater> validaterProvider,
      Provider<Validater> validaterAlphaProvider,
      Provider<UserProfileRepository> userProfileRepositoryProvider,
      Provider<DiagnosisRepo> diagnosisRepoProvider,
      Provider<ConnectionRepo> connectionRepoProvider,
      Provider<NotificationRepo> notificationRepoProvider) {
    return new DiagnosisViewStep1ViewModel_Factory(validaterProvider, validaterAlphaProvider, userProfileRepositoryProvider, diagnosisRepoProvider, connectionRepoProvider, notificationRepoProvider);
  }

  public static DiagnosisViewStep1ViewModel newInstance(Validater validater,
      Validater validaterAlpha, UserProfileRepository userProfileRepository,
      DiagnosisRepo diagnosisRepo, ConnectionRepo connectionRepo,
      NotificationRepo notificationRepo) {
    return new DiagnosisViewStep1ViewModel(validater, validaterAlpha, userProfileRepository, diagnosisRepo, connectionRepo, notificationRepo);
  }
}
