// Generated by Dagger (https://dagger.dev).
package com.cardio.physician.ui;

import android.app.Activity;
import android.app.Service;
import android.os.Handler;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.cardio.physician.data.local.SharedPreferences;
import com.cardio.physician.data.local.UserManager;
import com.cardio.physician.data.remote.addpatient.AddPatientRepositoryImp;
import com.cardio.physician.data.remote.changepassword.ChangePasswordRepository;
import com.cardio.physician.data.remote.common.repositary.UserAuthRepositaryImp;
import com.cardio.physician.data.remote.connections.ConnectionRepoImp;
import com.cardio.physician.data.remote.diagnosis.repositary.DiagnosisRepoImp;
import com.cardio.physician.data.remote.fcm.FcmManager;
import com.cardio.physician.data.remote.fitnesstracker.fitbit.FitbitManager;
import com.cardio.physician.data.remote.fitnesstracker.fitbit.FitbitRepositaryImp;
import com.cardio.physician.data.remote.fitnesstracker.googlefit.GoogleFitBitRepositaryImp;
import com.cardio.physician.data.remote.fitnesstracker.googlefit.GoogleFitManager;
import com.cardio.physician.data.remote.login.LoginRepositoryImp;
import com.cardio.physician.data.remote.notifications.NotificationsRepoImp;
import com.cardio.physician.data.remote.phoneverification.PhoneVerificationRepository;
import com.cardio.physician.data.remote.profile.UserProfileRepository;
import com.cardio.physician.data.remote.questionnaire.QuestionnaireRepoImp;
import com.cardio.physician.data.remote.signup.SignUpRepository;
import com.cardio.physician.data.remote.synchealth.SyncHealthRepositoryImp;
import com.cardio.physician.di.ApplicationModule;
import com.cardio.physician.di.ApplicationModule_GetUserManagerFactory;
import com.cardio.physician.di.ApplicationModule_ProvideAlphaFieldValidatorFactory;
import com.cardio.physician.di.ApplicationModule_ProvideExecuterServiceFactory;
import com.cardio.physician.di.ApplicationModule_ProvideFieldValidatorFactory;
import com.cardio.physician.di.ApplicationModule_ProvideFirebaseAuthFactory;
import com.cardio.physician.di.ApplicationModule_ProvideFirebaseFireStoreFactory;
import com.cardio.physician.di.ApplicationModule_ProvideFirebaseStorageFactory;
import com.cardio.physician.di.ApplicationModule_ProvideFirebaseStorageReferenceFactory;
import com.cardio.physician.di.ApplicationModule_ProvidePreferenceFactory;
import com.cardio.physician.di.ApplicationModule_ProvideUiHandlerFactory;
import com.cardio.physician.di.FragmentModule;
import com.cardio.physician.di.FragmentModule_ProvideBpGraphFactory;
import com.cardio.physician.di.FragmentModule_ProvideHeartRateGraphFactory;
import com.cardio.physician.di.FragmentModule_ProvideStepCountGraphFactory;
import com.cardio.physician.di.FragmentModule_ProvideWeightGraphFactory;
import com.cardio.physician.di.NetworkModule;
import com.cardio.physician.di.NetworkModule_ProvideApiServiceFactory;
import com.cardio.physician.di.NetworkModule_ProvideBaseUrlFactory;
import com.cardio.physician.di.NetworkModule_ProvideOkHttpClientFactory;
import com.cardio.physician.di.NetworkModule_ProvideRetrofitFactory;
import com.cardio.physician.di.RepositaryModule;
import com.cardio.physician.di.RepositaryModule_ProvideConnectionsRepoFactory;
import com.cardio.physician.di.RepositaryModule_ProvideDiagnosisRepoFactory;
import com.cardio.physician.di.RepositaryModule_ProvideFitbitRepositaryFactory;
import com.cardio.physician.di.RepositaryModule_ProvideFitnessRepositaryFactory;
import com.cardio.physician.di.RepositaryModule_ProvideGoogleFitManagerFactory;
import com.cardio.physician.di.RepositaryModule_ProvideGoogleRepositaryFactory;
import com.cardio.physician.di.RepositaryModule_ProvideLoginRepositaryFactory;
import com.cardio.physician.di.RepositaryModule_ProvideNotificationsRepoFactory;
import com.cardio.physician.di.RepositaryModule_ProvideQuestionareRepoFactory;
import com.cardio.physician.di.RepositaryModule_ProvideSyncHealthRepoFactory;
import com.cardio.physician.di.RepositaryModule_ProvideUserAuthRepoFactory;
import com.cardio.physician.di.ServiceModule;
import com.cardio.physician.di.ServiceModule_ProvideServiceFacadeFactory;
import com.cardio.physician.domain.common.repository.BaseRepository;
import com.cardio.physician.domain.common.repository.UserAuthRepositary;
import com.cardio.physician.domain.connection.ConnectionRepo;
import com.cardio.physician.domain.diagnosis.DiagnosisRepo;
import com.cardio.physician.domain.fitness.FitnessRepositary;
import com.cardio.physician.domain.login.LoginRepositary;
import com.cardio.physician.domain.notifications.NotificationRepo;
import com.cardio.physician.domain.questionare.QuestionnaireRepo;
import com.cardio.physician.domain.synchealth.SyncHealthRepositary;
import com.cardio.physician.network.InternetInterceptor;
import com.cardio.physician.network.NetworkHelper;
import com.cardio.physician.network.api.ApiService;
import com.cardio.physician.ui.common.base.activity.BaseActivity;
import com.cardio.physician.ui.common.base.activity.BaseActivity_MembersInjector;
import com.cardio.physician.ui.common.base.viewmodel.BaseAuthViewModel;
import com.cardio.physician.ui.common.base.viewmodel.BaseAuthViewModel_HiltModules_KeyModule_ProvideFactory;
import com.cardio.physician.ui.common.utils.textwatcher.LabelVisiblityHelper;
import com.cardio.physician.ui.common.utils.validation.Validater;
import com.cardio.physician.ui.service.SyncHealthServiceFacade;
import com.cardio.physician.ui.service.SyncHeathDataService;
import com.cardio.physician.ui.service.SyncHeathDataService_MembersInjector;
import com.cardio.physician.ui.views.add_patient.AddPatientActivity;
import com.cardio.physician.ui.views.add_patient.AddPatientViewModel;
import com.cardio.physician.ui.views.add_patient.AddPatientViewModel_HiltModules_KeyModule_ProvideFactory;
import com.cardio.physician.ui.views.auth.AuthenticateUserActivity;
import com.cardio.physician.ui.views.auth.login.LoginFragment;
import com.cardio.physician.ui.views.auth.login.LoginFragment_MembersInjector;
import com.cardio.physician.ui.views.auth.login.LoginViewModel;
import com.cardio.physician.ui.views.auth.login.LoginViewModel_HiltModules_KeyModule_ProvideFactory;
import com.cardio.physician.ui.views.auth.phone_verification.PhoneNumberVerificationFragment;
import com.cardio.physician.ui.views.auth.phone_verification.PhoneVerificationViewModel;
import com.cardio.physician.ui.views.auth.phone_verification.PhoneVerificationViewModel_HiltModules_KeyModule_ProvideFactory;
import com.cardio.physician.ui.views.auth.signup.SignUpFragment;
import com.cardio.physician.ui.views.auth.signup.SignUpFragment_MembersInjector;
import com.cardio.physician.ui.views.auth.signup.SignUpViewModel;
import com.cardio.physician.ui.views.auth.signup.SignUpViewModel_HiltModules_KeyModule_ProvideFactory;
import com.cardio.physician.ui.views.change_email.ChangeEmailActivity;
import com.cardio.physician.ui.views.change_email.ChangeEmailViewModel;
import com.cardio.physician.ui.views.change_email.ChangeEmailViewModel_HiltModules_KeyModule_ProvideFactory;
import com.cardio.physician.ui.views.dashboard.DashboardActivity;
import com.cardio.physician.ui.views.dashboard.common.graph.BpBarMpChartGraphImp;
import com.cardio.physician.ui.views.dashboard.common.graph.HeartRateMpChartGraphImp;
import com.cardio.physician.ui.views.dashboard.common.graph.StepCountMpGraphImp;
import com.cardio.physician.ui.views.dashboard.common.graph.WeightMpChartGraphImp;
import com.cardio.physician.ui.views.dashboard.common.graph.base.BpGraph;
import com.cardio.physician.ui.views.dashboard.common.graph.base.HeartRateGraph;
import com.cardio.physician.ui.views.dashboard.common.graph.base.StepCountGraph;
import com.cardio.physician.ui.views.dashboard.common.graph.base.WeightGraph;
import com.cardio.physician.ui.views.dashboard.fragment.DashboardFragment;
import com.cardio.physician.ui.views.dashboard.fragment.DashboardFragment_MembersInjector;
import com.cardio.physician.ui.views.dashboard.fragment.DashboardViewModel;
import com.cardio.physician.ui.views.dashboard.fragment.DashboardViewModel_HiltModules_KeyModule_ProvideFactory;
import com.cardio.physician.ui.views.dashboard.fragment.PatientDashboardFragment;
import com.cardio.physician.ui.views.dashboard.fragment.PatientDashboardFragment_MembersInjector;
import com.cardio.physician.ui.views.diagnosis.DiagnosisActivity;
import com.cardio.physician.ui.views.diagnosis.DiagnosisActivityViewModel;
import com.cardio.physician.ui.views.diagnosis.DiagnosisActivityViewModel_HiltModules_KeyModule_ProvideFactory;
import com.cardio.physician.ui.views.diagnosis.EditDiagnosisActivity;
import com.cardio.physician.ui.views.diagnosis.step1.DiagnosisFragmentStep1;
import com.cardio.physician.ui.views.diagnosis.step1.DiagnosisFragmentStep1_MembersInjector;
import com.cardio.physician.ui.views.diagnosis.step1.DiagnosisViewStep1ViewModel;
import com.cardio.physician.ui.views.diagnosis.step1.DiagnosisViewStep1ViewModel_HiltModules_KeyModule_ProvideFactory;
import com.cardio.physician.ui.views.diagnosis.step2.DiagnosisFragmentStep2;
import com.cardio.physician.ui.views.diagnosis.step2.DiagnosisStep2ViewModel;
import com.cardio.physician.ui.views.diagnosis.step2.DiagnosisStep2ViewModel_HiltModules_KeyModule_ProvideFactory;
import com.cardio.physician.ui.views.diagnosis.step3.DiagnosisFragmentStep3;
import com.cardio.physician.ui.views.diagnosis.step3.DiagnosisFragmentStep3ViewModel;
import com.cardio.physician.ui.views.diagnosis.step3.DiagnosisFragmentStep3ViewModel_HiltModules_KeyModule_ProvideFactory;
import com.cardio.physician.ui.views.diagnosis.step4.DiagnosisFragmentStep4;
import com.cardio.physician.ui.views.diagnosis.step4.DiagnosisFragmentStep4ViewModel;
import com.cardio.physician.ui.views.diagnosis.step4.DiagnosisFragmentStep4ViewModel_HiltModules_KeyModule_ProvideFactory;
import com.cardio.physician.ui.views.forgot_password.ForgotPasswordFragment;
import com.cardio.physician.ui.views.forgot_password.ForgotPasswordViewModel;
import com.cardio.physician.ui.views.forgot_password.ForgotPasswordViewModel_HiltModules_KeyModule_ProvideFactory;
import com.cardio.physician.ui.views.healthlogs.HealthLogsActivity;
import com.cardio.physician.ui.views.healthlogs.HealthLogsActivity_MembersInjector;
import com.cardio.physician.ui.views.healthlogs.HealthLogsViewModel;
import com.cardio.physician.ui.views.healthlogs.HealthLogsViewModel_HiltModules_KeyModule_ProvideFactory;
import com.cardio.physician.ui.views.illness.IllnessActivity;
import com.cardio.physician.ui.views.notifications.NotificationsActivity;
import com.cardio.physician.ui.views.notifications.NotificatonsViewModel;
import com.cardio.physician.ui.views.notifications.NotificatonsViewModel_HiltModules_KeyModule_ProvideFactory;
import com.cardio.physician.ui.views.profile.change_password.ChangePasswordFragment;
import com.cardio.physician.ui.views.profile.change_password.ChangePasswordViewModel;
import com.cardio.physician.ui.views.profile.change_password.ChangePasswordViewModel_HiltModules_KeyModule_ProvideFactory;
import com.cardio.physician.ui.views.profile.editprofile.EditProfileFragment;
import com.cardio.physician.ui.views.profile.editprofile.EditUserProfileViewModel;
import com.cardio.physician.ui.views.profile.editprofile.EditUserProfileViewModel_HiltModules_KeyModule_ProvideFactory;
import com.cardio.physician.ui.views.profile.profile.GetProfileFragment;
import com.cardio.physician.ui.views.profile.profile.UserProfileViewModel;
import com.cardio.physician.ui.views.profile.profile.UserProfileViewModel_HiltModules_KeyModule_ProvideFactory;
import com.cardio.physician.ui.views.profile.profile_menu.ProfileMenuFragment;
import com.cardio.physician.ui.views.profile.setting.SettingFragment;
import com.cardio.physician.ui.views.profile.setting.SettingFragment_MembersInjector;
import com.cardio.physician.ui.views.profile.setting.SettingViewModel;
import com.cardio.physician.ui.views.profile.setting.SettingViewModel_HiltModules_KeyModule_ProvideFactory;
import com.cardio.physician.ui.views.profile.web_view.WebViewFragment;
import com.cardio.physician.ui.views.splash.SplashActivity;
import com.cardio.physician.ui.views.sync_health_data.SyncHealthDataFragment;
import com.cardio.physician.ui.views.sync_health_data.SyncHealthViewModel;
import com.cardio.physician.ui.views.sync_health_data.SyncHealthViewModel_HiltModules_KeyModule_ProvideFactory;
import com.cardio.physician.ui.views.sync_health_data.activity.SyncHealthActivty;
import com.cardio.physician.ui.views.tutorial.TutorialActivity;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.storage.FirebaseStorage;
import com.google.firebase.storage.StorageReference;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.MemoizedSentinel;
import dagger.internal.Preconditions;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppCardioPatient_HiltComponents_SingletonC extends AppCardioPatient_HiltComponents.SingletonC {
  private final ApplicationContextModule applicationContextModule;

  private final ApplicationModule applicationModule;

  private final NetworkModule networkModule;

  private final RepositaryModule repositaryModule;

  private volatile Object firebaseAuth = new MemoizedSentinel();

  private volatile Object sharedPreferences = new MemoizedSentinel();

  private volatile Object userManager = new MemoizedSentinel();

  private volatile Object networkHelper = new MemoizedSentinel();

  private volatile Object internetInterceptor = new MemoizedSentinel();

  private volatile Object okHttpClient = new MemoizedSentinel();

  private volatile Object executorService = new MemoizedSentinel();

  private volatile Object firebaseFirestore = new MemoizedSentinel();

  private volatile Object connectionRepo = new MemoizedSentinel();

  private volatile Object handler = new MemoizedSentinel();

  private volatile Object namedFitnessRepositary = new MemoizedSentinel();

  private volatile Object firebaseStorage = new MemoizedSentinel();

  private volatile Object storageReference = new MemoizedSentinel();

  private volatile Object retrofit = new MemoizedSentinel();

  private volatile Object apiService = new MemoizedSentinel();

  private volatile Object userAuthRepositary = new MemoizedSentinel();

  private volatile Object diagnosisRepo = new MemoizedSentinel();

  private volatile Object syncHealthRepositary = new MemoizedSentinel();

  private volatile Object questionnaireRepo = new MemoizedSentinel();

  private volatile Object notificationRepo = new MemoizedSentinel();

  private volatile Object namedValidater = new MemoizedSentinel();

  private volatile Object namedValidater2 = new MemoizedSentinel();

  private volatile Object loginRepositary = new MemoizedSentinel();

  private volatile Object googleFitManager = new MemoizedSentinel();

  private volatile Object namedFitnessRepositary2 = new MemoizedSentinel();

  private DaggerAppCardioPatient_HiltComponents_SingletonC(
      ApplicationContextModule applicationContextModuleParam,
      ApplicationModule applicationModuleParam, NetworkModule networkModuleParam,
      RepositaryModule repositaryModuleParam) {
    this.applicationContextModule = applicationContextModuleParam;
    this.applicationModule = applicationModuleParam;
    this.networkModule = networkModuleParam;
    this.repositaryModule = repositaryModuleParam;
  }

  public static Builder builder() {
    return new Builder();
  }

  private FirebaseAuth firebaseAuth() {
    Object local = firebaseAuth;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = firebaseAuth;
        if (local instanceof MemoizedSentinel) {
          local = ApplicationModule_ProvideFirebaseAuthFactory.provideFirebaseAuth(applicationModule);
          firebaseAuth = DoubleCheck.reentrantCheck(firebaseAuth, local);
        }
      }
    }
    return (FirebaseAuth) local;
  }

  private SharedPreferences sharedPreferences() {
    Object local = sharedPreferences;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = sharedPreferences;
        if (local instanceof MemoizedSentinel) {
          local = ApplicationModule_ProvidePreferenceFactory.providePreference(applicationModule, ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
          sharedPreferences = DoubleCheck.reentrantCheck(sharedPreferences, local);
        }
      }
    }
    return (SharedPreferences) local;
  }

  private UserManager userManager() {
    Object local = userManager;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = userManager;
        if (local instanceof MemoizedSentinel) {
          local = ApplicationModule_GetUserManagerFactory.getUserManager(applicationModule, sharedPreferences());
          userManager = DoubleCheck.reentrantCheck(userManager, local);
        }
      }
    }
    return (UserManager) local;
  }

  private NetworkHelper networkHelper() {
    Object local = networkHelper;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = networkHelper;
        if (local instanceof MemoizedSentinel) {
          local = new NetworkHelper(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
          networkHelper = DoubleCheck.reentrantCheck(networkHelper, local);
        }
      }
    }
    return (NetworkHelper) local;
  }

  private InternetInterceptor internetInterceptor() {
    Object local = internetInterceptor;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = internetInterceptor;
        if (local instanceof MemoizedSentinel) {
          local = new InternetInterceptor(networkHelper());
          internetInterceptor = DoubleCheck.reentrantCheck(internetInterceptor, local);
        }
      }
    }
    return (InternetInterceptor) local;
  }

  private OkHttpClient okHttpClient() {
    Object local = okHttpClient;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = okHttpClient;
        if (local instanceof MemoizedSentinel) {
          local = NetworkModule_ProvideOkHttpClientFactory.provideOkHttpClient(networkModule, userManager(), internetInterceptor());
          okHttpClient = DoubleCheck.reentrantCheck(okHttpClient, local);
        }
      }
    }
    return (OkHttpClient) local;
  }

  private ExecutorService executorService() {
    Object local = executorService;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = executorService;
        if (local instanceof MemoizedSentinel) {
          local = ApplicationModule_ProvideExecuterServiceFactory.provideExecuterService(applicationModule);
          executorService = DoubleCheck.reentrantCheck(executorService, local);
        }
      }
    }
    return (ExecutorService) local;
  }

  private FirebaseFirestore firebaseFirestore() {
    Object local = firebaseFirestore;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = firebaseFirestore;
        if (local instanceof MemoizedSentinel) {
          local = ApplicationModule_ProvideFirebaseFireStoreFactory.provideFirebaseFireStore(applicationModule);
          firebaseFirestore = DoubleCheck.reentrantCheck(firebaseFirestore, local);
        }
      }
    }
    return (FirebaseFirestore) local;
  }

  private ConnectionRepoImp connectionRepoImp() {
    return new ConnectionRepoImp(firebaseFirestore(), firebaseAuth());
  }

  private ConnectionRepo connectionRepo() {
    Object local = connectionRepo;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = connectionRepo;
        if (local instanceof MemoizedSentinel) {
          local = RepositaryModule_ProvideConnectionsRepoFactory.provideConnectionsRepo(repositaryModule, connectionRepoImp());
          connectionRepo = DoubleCheck.reentrantCheck(connectionRepo, local);
        }
      }
    }
    return (ConnectionRepo) local;
  }

  private Handler handler() {
    Object local = handler;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = handler;
        if (local instanceof MemoizedSentinel) {
          local = ApplicationModule_ProvideUiHandlerFactory.provideUiHandler(applicationModule);
          handler = DoubleCheck.reentrantCheck(handler, local);
        }
      }
    }
    return (Handler) local;
  }

  private FitbitManager fitbitManager() {
    return new FitbitManager(executorService(), handler());
  }

  private FitbitRepositaryImp fitbitRepositaryImp() {
    return new FitbitRepositaryImp(fitbitManager(), userManager(), ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
  }

  private FitnessRepositary namedFitnessRepositary() {
    Object local = namedFitnessRepositary;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = namedFitnessRepositary;
        if (local instanceof MemoizedSentinel) {
          local = RepositaryModule_ProvideFitbitRepositaryFactory.provideFitbitRepositary(repositaryModule, fitbitRepositaryImp());
          namedFitnessRepositary = DoubleCheck.reentrantCheck(namedFitnessRepositary, local);
        }
      }
    }
    return (FitnessRepositary) local;
  }

  private FirebaseStorage firebaseStorage() {
    Object local = firebaseStorage;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = firebaseStorage;
        if (local instanceof MemoizedSentinel) {
          local = ApplicationModule_ProvideFirebaseStorageFactory.provideFirebaseStorage(applicationModule);
          firebaseStorage = DoubleCheck.reentrantCheck(firebaseStorage, local);
        }
      }
    }
    return (FirebaseStorage) local;
  }

  private StorageReference storageReference() {
    Object local = storageReference;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = storageReference;
        if (local instanceof MemoizedSentinel) {
          local = ApplicationModule_ProvideFirebaseStorageReferenceFactory.provideFirebaseStorageReference(applicationModule, firebaseStorage());
          storageReference = DoubleCheck.reentrantCheck(storageReference, local);
        }
      }
    }
    return (StorageReference) local;
  }

  private Retrofit retrofit() {
    Object local = retrofit;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = retrofit;
        if (local instanceof MemoizedSentinel) {
          local = NetworkModule_ProvideRetrofitFactory.provideRetrofit(networkModule, okHttpClient(), NetworkModule_ProvideBaseUrlFactory.provideBaseUrl(networkModule));
          retrofit = DoubleCheck.reentrantCheck(retrofit, local);
        }
      }
    }
    return (Retrofit) local;
  }

  private ApiService apiService() {
    Object local = apiService;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = apiService;
        if (local instanceof MemoizedSentinel) {
          local = NetworkModule_ProvideApiServiceFactory.provideApiService(networkModule, retrofit());
          apiService = DoubleCheck.reentrantCheck(apiService, local);
        }
      }
    }
    return (ApiService) local;
  }

  private UserAuthRepositaryImp userAuthRepositaryImp() {
    return new UserAuthRepositaryImp(firebaseAuth());
  }

  private UserAuthRepositary userAuthRepositary() {
    Object local = userAuthRepositary;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = userAuthRepositary;
        if (local instanceof MemoizedSentinel) {
          local = RepositaryModule_ProvideUserAuthRepoFactory.provideUserAuthRepo(repositaryModule, userAuthRepositaryImp());
          userAuthRepositary = DoubleCheck.reentrantCheck(userAuthRepositary, local);
        }
      }
    }
    return (UserAuthRepositary) local;
  }

  private FcmManager fcmManager() {
    return new FcmManager(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule), firebaseAuth(), okHttpClient(), executorService(), userManager(), connectionRepo());
  }

  private DiagnosisRepoImp diagnosisRepoImp() {
    return new DiagnosisRepoImp(apiService(), firebaseFirestore(), firebaseAuth(), fcmManager());
  }

  private DiagnosisRepo diagnosisRepo() {
    Object local = diagnosisRepo;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = diagnosisRepo;
        if (local instanceof MemoizedSentinel) {
          local = RepositaryModule_ProvideDiagnosisRepoFactory.provideDiagnosisRepo(repositaryModule, diagnosisRepoImp());
          diagnosisRepo = DoubleCheck.reentrantCheck(diagnosisRepo, local);
        }
      }
    }
    return (DiagnosisRepo) local;
  }

  private SyncHealthRepositoryImp syncHealthRepositoryImp() {
    return new SyncHealthRepositoryImp(firebaseFirestore(), firebaseAuth());
  }

  private SyncHealthRepositary syncHealthRepositary() {
    Object local = syncHealthRepositary;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = syncHealthRepositary;
        if (local instanceof MemoizedSentinel) {
          local = RepositaryModule_ProvideSyncHealthRepoFactory.provideSyncHealthRepo(repositaryModule, syncHealthRepositoryImp());
          syncHealthRepositary = DoubleCheck.reentrantCheck(syncHealthRepositary, local);
        }
      }
    }
    return (SyncHealthRepositary) local;
  }

  private QuestionnaireRepoImp questionnaireRepoImp() {
    return new QuestionnaireRepoImp(firebaseFirestore());
  }

  private QuestionnaireRepo questionnaireRepo() {
    Object local = questionnaireRepo;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = questionnaireRepo;
        if (local instanceof MemoizedSentinel) {
          local = RepositaryModule_ProvideQuestionareRepoFactory.provideQuestionareRepo(repositaryModule, questionnaireRepoImp());
          questionnaireRepo = DoubleCheck.reentrantCheck(questionnaireRepo, local);
        }
      }
    }
    return (QuestionnaireRepo) local;
  }

  private NotificationsRepoImp notificationsRepoImp() {
    return new NotificationsRepoImp(firebaseFirestore(), firebaseAuth(), fcmManager(), userManager());
  }

  private NotificationRepo notificationRepo() {
    Object local = notificationRepo;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = notificationRepo;
        if (local instanceof MemoizedSentinel) {
          local = RepositaryModule_ProvideNotificationsRepoFactory.provideNotificationsRepo(repositaryModule, notificationsRepoImp());
          notificationRepo = DoubleCheck.reentrantCheck(notificationRepo, local);
        }
      }
    }
    return (NotificationRepo) local;
  }

  private Validater namedValidater() {
    Object local = namedValidater;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = namedValidater;
        if (local instanceof MemoizedSentinel) {
          local = ApplicationModule_ProvideFieldValidatorFactory.provideFieldValidator(applicationModule, ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
          namedValidater = DoubleCheck.reentrantCheck(namedValidater, local);
        }
      }
    }
    return (Validater) local;
  }

  private Validater namedValidater2() {
    Object local = namedValidater2;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = namedValidater2;
        if (local instanceof MemoizedSentinel) {
          local = ApplicationModule_ProvideAlphaFieldValidatorFactory.provideAlphaFieldValidator(applicationModule, ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
          namedValidater2 = DoubleCheck.reentrantCheck(namedValidater2, local);
        }
      }
    }
    return (Validater) local;
  }

  private LoginRepositoryImp loginRepositoryImp() {
    return new LoginRepositoryImp(firebaseAuth(), firebaseFirestore(), storageReference(), apiService());
  }

  private LoginRepositary loginRepositary() {
    Object local = loginRepositary;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = loginRepositary;
        if (local instanceof MemoizedSentinel) {
          local = RepositaryModule_ProvideLoginRepositaryFactory.provideLoginRepositary(repositaryModule, loginRepositoryImp());
          loginRepositary = DoubleCheck.reentrantCheck(loginRepositary, local);
        }
      }
    }
    return (LoginRepositary) local;
  }

  private GoogleFitManager googleFitManager() {
    Object local = googleFitManager;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = googleFitManager;
        if (local instanceof MemoizedSentinel) {
          local = RepositaryModule_ProvideGoogleFitManagerFactory.provideGoogleFitManager(repositaryModule, ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
          googleFitManager = DoubleCheck.reentrantCheck(googleFitManager, local);
        }
      }
    }
    return (GoogleFitManager) local;
  }

  private GoogleFitBitRepositaryImp googleFitBitRepositaryImp() {
    return new GoogleFitBitRepositaryImp(googleFitManager(), userManager(), ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
  }

  private FitnessRepositary namedFitnessRepositary2() {
    Object local = namedFitnessRepositary2;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = namedFitnessRepositary2;
        if (local instanceof MemoizedSentinel) {
          local = RepositaryModule_ProvideGoogleRepositaryFactory.provideGoogleRepositary(repositaryModule, googleFitBitRepositaryImp());
          namedFitnessRepositary2 = DoubleCheck.reentrantCheck(namedFitnessRepositary2, local);
        }
      }
    }
    return (FitnessRepositary) local;
  }

  private FitnessRepositary namedFitnessRepositary3() {
    return RepositaryModule_ProvideFitnessRepositaryFactory.provideFitnessRepositary(repositaryModule, namedFitnessRepositary(), namedFitnessRepositary2(), userManager(), ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
  }

  @Override
  public void injectAppCardioPatient(AppCardioPatient appCardioPatient) {
  }

  @Override
  public ActivityRetainedComponentBuilder retainedComponentBuilder() {
    return new ActivityRetainedCBuilder();
  }

  @Override
  public ServiceComponentBuilder serviceComponentBuilder() {
    return new ServiceCBuilder();
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private ApplicationModule applicationModule;

    private NetworkModule networkModule;

    private RepositaryModule repositaryModule;

    private Builder() {
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    public Builder applicationModule(ApplicationModule applicationModule) {
      this.applicationModule = Preconditions.checkNotNull(applicationModule);
      return this;
    }

    public Builder networkModule(NetworkModule networkModule) {
      this.networkModule = Preconditions.checkNotNull(networkModule);
      return this;
    }

    public Builder repositaryModule(RepositaryModule repositaryModule) {
      this.repositaryModule = Preconditions.checkNotNull(repositaryModule);
      return this;
    }

    public AppCardioPatient_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      if (applicationModule == null) {
        this.applicationModule = new ApplicationModule();
      }
      if (networkModule == null) {
        this.networkModule = new NetworkModule();
      }
      if (repositaryModule == null) {
        this.repositaryModule = new RepositaryModule();
      }
      return new DaggerAppCardioPatient_HiltComponents_SingletonC(applicationContextModule, applicationModule, networkModule, repositaryModule);
    }
  }

  private final class ActivityRetainedCBuilder implements AppCardioPatient_HiltComponents.ActivityRetainedC.Builder {
    @Override
    public AppCardioPatient_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl();
    }
  }

  private final class ActivityRetainedCImpl extends AppCardioPatient_HiltComponents.ActivityRetainedC {
    private volatile Object lifecycle = new MemoizedSentinel();

    private ActivityRetainedCImpl() {

    }

    private Object lifecycle() {
      Object local = lifecycle;
      if (local instanceof MemoizedSentinel) {
        synchronized (local) {
          local = lifecycle;
          if (local instanceof MemoizedSentinel) {
            local = ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();
            lifecycle = DoubleCheck.reentrantCheck(lifecycle, local);
          }
        }
      }
      return (Object) local;
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder();
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycle();
    }

    private final class ActivityCBuilder implements AppCardioPatient_HiltComponents.ActivityC.Builder {
      private Activity activity;

      @Override
      public ActivityCBuilder activity(Activity activity) {
        this.activity = Preconditions.checkNotNull(activity);
        return this;
      }

      @Override
      public AppCardioPatient_HiltComponents.ActivityC build() {
        Preconditions.checkBuilderRequirement(activity, Activity.class);
        return new ActivityCImpl(activity);
      }
    }

    private final class ActivityCImpl extends AppCardioPatient_HiltComponents.ActivityC {
      private ActivityCImpl(Activity activity) {

      }

      private FcmManager fcmManager() {
        return new FcmManager(ApplicationContextModule_ProvideContextFactory.provideContext(DaggerAppCardioPatient_HiltComponents_SingletonC.this.applicationContextModule), DaggerAppCardioPatient_HiltComponents_SingletonC.this.firebaseAuth(), DaggerAppCardioPatient_HiltComponents_SingletonC.this.okHttpClient(), DaggerAppCardioPatient_HiltComponents_SingletonC.this.executorService(), DaggerAppCardioPatient_HiltComponents_SingletonC.this.userManager(), DaggerAppCardioPatient_HiltComponents_SingletonC.this.connectionRepo());
      }

      @Override
      public void injectBaseActivity(BaseActivity baseActivity) {
        injectBaseActivity2(baseActivity);
      }

      @Override
      public void injectAddPatientActivity(AddPatientActivity addPatientActivity) {
        injectAddPatientActivity2(addPatientActivity);
      }

      @Override
      public void injectAuthenticateUserActivity(
          AuthenticateUserActivity authenticateUserActivity) {
        injectAuthenticateUserActivity2(authenticateUserActivity);
      }

      @Override
      public void injectChangeEmailActivity(ChangeEmailActivity changeEmailActivity) {
        injectChangeEmailActivity2(changeEmailActivity);
      }

      @Override
      public void injectDashboardActivity(DashboardActivity dashboardActivity) {
        injectDashboardActivity2(dashboardActivity);
      }

      @Override
      public void injectDiagnosisActivity(DiagnosisActivity diagnosisActivity) {
        injectDiagnosisActivity2(diagnosisActivity);
      }

      @Override
      public void injectEditDiagnosisActivity(EditDiagnosisActivity editDiagnosisActivity) {
        injectEditDiagnosisActivity2(editDiagnosisActivity);
      }

      @Override
      public void injectHealthLogsActivity(HealthLogsActivity healthLogsActivity) {
        injectHealthLogsActivity2(healthLogsActivity);
      }

      @Override
      public void injectIllnessActivity(IllnessActivity illnessActivity) {
        injectIllnessActivity2(illnessActivity);
      }

      @Override
      public void injectNotificationsActivity(NotificationsActivity notificationsActivity) {
        injectNotificationsActivity2(notificationsActivity);
      }

      @Override
      public void injectSplashActivity(SplashActivity splashActivity) {
        injectSplashActivity2(splashActivity);
      }

      @Override
      public void injectSyncHealthActivty(SyncHealthActivty syncHealthActivty) {
        injectSyncHealthActivty2(syncHealthActivty);
      }

      @Override
      public void injectTutorialActivity(TutorialActivity tutorialActivity) {
        injectTutorialActivity2(tutorialActivity);
      }

      @Override
      public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
        return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerAppCardioPatient_HiltComponents_SingletonC.this.applicationContextModule), getViewModelKeys(), new ViewModelCBuilder());
      }

      @Override
      public Set<String> getViewModelKeys() {
        return ImmutableSet.<String>of(AddPatientViewModel_HiltModules_KeyModule_ProvideFactory.provide(), BaseAuthViewModel_HiltModules_KeyModule_ProvideFactory.provide(), ChangeEmailViewModel_HiltModules_KeyModule_ProvideFactory.provide(), ChangePasswordViewModel_HiltModules_KeyModule_ProvideFactory.provide(), DashboardViewModel_HiltModules_KeyModule_ProvideFactory.provide(), DiagnosisActivityViewModel_HiltModules_KeyModule_ProvideFactory.provide(), DiagnosisFragmentStep3ViewModel_HiltModules_KeyModule_ProvideFactory.provide(), DiagnosisFragmentStep4ViewModel_HiltModules_KeyModule_ProvideFactory.provide(), DiagnosisStep2ViewModel_HiltModules_KeyModule_ProvideFactory.provide(), DiagnosisViewStep1ViewModel_HiltModules_KeyModule_ProvideFactory.provide(), EditUserProfileViewModel_HiltModules_KeyModule_ProvideFactory.provide(), ForgotPasswordViewModel_HiltModules_KeyModule_ProvideFactory.provide(), HealthLogsViewModel_HiltModules_KeyModule_ProvideFactory.provide(), LoginViewModel_HiltModules_KeyModule_ProvideFactory.provide(), NotificatonsViewModel_HiltModules_KeyModule_ProvideFactory.provide(), PhoneVerificationViewModel_HiltModules_KeyModule_ProvideFactory.provide(), SettingViewModel_HiltModules_KeyModule_ProvideFactory.provide(), SignUpViewModel_HiltModules_KeyModule_ProvideFactory.provide(), SyncHealthViewModel_HiltModules_KeyModule_ProvideFactory.provide(), UserProfileViewModel_HiltModules_KeyModule_ProvideFactory.provide());
      }

      @Override
      public ViewModelComponentBuilder getViewModelComponentBuilder() {
        return new ViewModelCBuilder();
      }

      @Override
      public FragmentComponentBuilder fragmentComponentBuilder() {
        return new FragmentCBuilder();
      }

      @Override
      public ViewComponentBuilder viewComponentBuilder() {
        return new ViewCBuilder();
      }

      @CanIgnoreReturnValue
      private BaseActivity injectBaseActivity2(BaseActivity instance) {
        BaseActivity_MembersInjector.injectFcmManager(instance, fcmManager());
        BaseActivity_MembersInjector.injectUserManager(instance, DaggerAppCardioPatient_HiltComponents_SingletonC.this.userManager());
        BaseActivity_MembersInjector.injectFitbit(instance, DaggerAppCardioPatient_HiltComponents_SingletonC.this.namedFitnessRepositary());
        return instance;
      }

      @CanIgnoreReturnValue
      private AddPatientActivity injectAddPatientActivity2(AddPatientActivity instance) {
        BaseActivity_MembersInjector.injectFcmManager(instance, fcmManager());
        BaseActivity_MembersInjector.injectUserManager(instance, DaggerAppCardioPatient_HiltComponents_SingletonC.this.userManager());
        BaseActivity_MembersInjector.injectFitbit(instance, DaggerAppCardioPatient_HiltComponents_SingletonC.this.namedFitnessRepositary());
        return instance;
      }

      @CanIgnoreReturnValue
      private AuthenticateUserActivity injectAuthenticateUserActivity2(
          AuthenticateUserActivity instance) {
        BaseActivity_MembersInjector.injectFcmManager(instance, fcmManager());
        BaseActivity_MembersInjector.injectUserManager(instance, DaggerAppCardioPatient_HiltComponents_SingletonC.this.userManager());
        BaseActivity_MembersInjector.injectFitbit(instance, DaggerAppCardioPatient_HiltComponents_SingletonC.this.namedFitnessRepositary());
        return instance;
      }

      @CanIgnoreReturnValue
      private ChangeEmailActivity injectChangeEmailActivity2(ChangeEmailActivity instance) {
        BaseActivity_MembersInjector.injectFcmManager(instance, fcmManager());
        BaseActivity_MembersInjector.injectUserManager(instance, DaggerAppCardioPatient_HiltComponents_SingletonC.this.userManager());
        BaseActivity_MembersInjector.injectFitbit(instance, DaggerAppCardioPatient_HiltComponents_SingletonC.this.namedFitnessRepositary());
        return instance;
      }

      @CanIgnoreReturnValue
      private DashboardActivity injectDashboardActivity2(DashboardActivity instance) {
        BaseActivity_MembersInjector.injectFcmManager(instance, fcmManager());
        BaseActivity_MembersInjector.injectUserManager(instance, DaggerAppCardioPatient_HiltComponents_SingletonC.this.userManager());
        BaseActivity_MembersInjector.injectFitbit(instance, DaggerAppCardioPatient_HiltComponents_SingletonC.this.namedFitnessRepositary());
        return instance;
      }

      @CanIgnoreReturnValue
      private DiagnosisActivity injectDiagnosisActivity2(DiagnosisActivity instance) {
        BaseActivity_MembersInjector.injectFcmManager(instance, fcmManager());
        BaseActivity_MembersInjector.injectUserManager(instance, DaggerAppCardioPatient_HiltComponents_SingletonC.this.userManager());
        BaseActivity_MembersInjector.injectFitbit(instance, DaggerAppCardioPatient_HiltComponents_SingletonC.this.namedFitnessRepositary());
        return instance;
      }

      @CanIgnoreReturnValue
      private EditDiagnosisActivity injectEditDiagnosisActivity2(EditDiagnosisActivity instance) {
        BaseActivity_MembersInjector.injectFcmManager(instance, fcmManager());
        BaseActivity_MembersInjector.injectUserManager(instance, DaggerAppCardioPatient_HiltComponents_SingletonC.this.userManager());
        BaseActivity_MembersInjector.injectFitbit(instance, DaggerAppCardioPatient_HiltComponents_SingletonC.this.namedFitnessRepositary());
        return instance;
      }

      @CanIgnoreReturnValue
      private HealthLogsActivity injectHealthLogsActivity2(HealthLogsActivity instance) {
        BaseActivity_MembersInjector.injectFcmManager(instance, fcmManager());
        BaseActivity_MembersInjector.injectUserManager(instance, DaggerAppCardioPatient_HiltComponents_SingletonC.this.userManager());
        BaseActivity_MembersInjector.injectFitbit(instance, DaggerAppCardioPatient_HiltComponents_SingletonC.this.namedFitnessRepositary());
        HealthLogsActivity_MembersInjector.injectLabelVisiblityHelper(instance, new LabelVisiblityHelper());
        return instance;
      }

      @CanIgnoreReturnValue
      private IllnessActivity injectIllnessActivity2(IllnessActivity instance) {
        BaseActivity_MembersInjector.injectFcmManager(instance, fcmManager());
        BaseActivity_MembersInjector.injectUserManager(instance, DaggerAppCardioPatient_HiltComponents_SingletonC.this.userManager());
        BaseActivity_MembersInjector.injectFitbit(instance, DaggerAppCardioPatient_HiltComponents_SingletonC.this.namedFitnessRepositary());
        return instance;
      }

      @CanIgnoreReturnValue
      private NotificationsActivity injectNotificationsActivity2(NotificationsActivity instance) {
        BaseActivity_MembersInjector.injectFcmManager(instance, fcmManager());
        BaseActivity_MembersInjector.injectUserManager(instance, DaggerAppCardioPatient_HiltComponents_SingletonC.this.userManager());
        BaseActivity_MembersInjector.injectFitbit(instance, DaggerAppCardioPatient_HiltComponents_SingletonC.this.namedFitnessRepositary());
        return instance;
      }

      @CanIgnoreReturnValue
      private SplashActivity injectSplashActivity2(SplashActivity instance) {
        BaseActivity_MembersInjector.injectFcmManager(instance, fcmManager());
        BaseActivity_MembersInjector.injectUserManager(instance, DaggerAppCardioPatient_HiltComponents_SingletonC.this.userManager());
        BaseActivity_MembersInjector.injectFitbit(instance, DaggerAppCardioPatient_HiltComponents_SingletonC.this.namedFitnessRepositary());
        return instance;
      }

      @CanIgnoreReturnValue
      private SyncHealthActivty injectSyncHealthActivty2(SyncHealthActivty instance) {
        BaseActivity_MembersInjector.injectFcmManager(instance, fcmManager());
        BaseActivity_MembersInjector.injectUserManager(instance, DaggerAppCardioPatient_HiltComponents_SingletonC.this.userManager());
        BaseActivity_MembersInjector.injectFitbit(instance, DaggerAppCardioPatient_HiltComponents_SingletonC.this.namedFitnessRepositary());
        return instance;
      }

      @CanIgnoreReturnValue
      private TutorialActivity injectTutorialActivity2(TutorialActivity instance) {
        BaseActivity_MembersInjector.injectFcmManager(instance, fcmManager());
        BaseActivity_MembersInjector.injectUserManager(instance, DaggerAppCardioPatient_HiltComponents_SingletonC.this.userManager());
        BaseActivity_MembersInjector.injectFitbit(instance, DaggerAppCardioPatient_HiltComponents_SingletonC.this.namedFitnessRepositary());
        return instance;
      }

      private final class FragmentCBuilder implements AppCardioPatient_HiltComponents.FragmentC.Builder {
        private Fragment fragment;

        @Override
        public FragmentCBuilder fragment(Fragment fragment) {
          this.fragment = Preconditions.checkNotNull(fragment);
          return this;
        }

        @Override
        public AppCardioPatient_HiltComponents.FragmentC build() {
          Preconditions.checkBuilderRequirement(fragment, Fragment.class);
          return new FragmentCI(new FragmentModule(), fragment);
        }
      }

      private final class FragmentCI extends AppCardioPatient_HiltComponents.FragmentC {
        private final FragmentModule fragmentModule;

        private volatile Object weightGraph = new MemoizedSentinel();

        private volatile Object stepCountGraph = new MemoizedSentinel();

        private volatile Object heartRateGraph = new MemoizedSentinel();

        private volatile Object bpGraph = new MemoizedSentinel();

        private FragmentCI(FragmentModule fragmentModuleParam, Fragment fragment) {
          this.fragmentModule = fragmentModuleParam;
        }

        private WeightGraph weightGraph() {
          Object local = weightGraph;
          if (local instanceof MemoizedSentinel) {
            synchronized (local) {
              local = weightGraph;
              if (local instanceof MemoizedSentinel) {
                local = FragmentModule_ProvideWeightGraphFactory.provideWeightGraph(fragmentModule, new WeightMpChartGraphImp());
                weightGraph = DoubleCheck.reentrantCheck(weightGraph, local);
              }
            }
          }
          return (WeightGraph) local;
        }

        private StepCountGraph stepCountGraph() {
          Object local = stepCountGraph;
          if (local instanceof MemoizedSentinel) {
            synchronized (local) {
              local = stepCountGraph;
              if (local instanceof MemoizedSentinel) {
                local = FragmentModule_ProvideStepCountGraphFactory.provideStepCountGraph(fragmentModule, new StepCountMpGraphImp());
                stepCountGraph = DoubleCheck.reentrantCheck(stepCountGraph, local);
              }
            }
          }
          return (StepCountGraph) local;
        }

        private HeartRateGraph heartRateGraph() {
          Object local = heartRateGraph;
          if (local instanceof MemoizedSentinel) {
            synchronized (local) {
              local = heartRateGraph;
              if (local instanceof MemoizedSentinel) {
                local = FragmentModule_ProvideHeartRateGraphFactory.provideHeartRateGraph(fragmentModule, new HeartRateMpChartGraphImp());
                heartRateGraph = DoubleCheck.reentrantCheck(heartRateGraph, local);
              }
            }
          }
          return (HeartRateGraph) local;
        }

        private BpGraph bpGraph() {
          Object local = bpGraph;
          if (local instanceof MemoizedSentinel) {
            synchronized (local) {
              local = bpGraph;
              if (local instanceof MemoizedSentinel) {
                local = FragmentModule_ProvideBpGraphFactory.provideBpGraph(fragmentModule, new BpBarMpChartGraphImp());
                bpGraph = DoubleCheck.reentrantCheck(bpGraph, local);
              }
            }
          }
          return (BpGraph) local;
        }

        @Override
        public void injectLoginFragment(LoginFragment loginFragment) {
          injectLoginFragment2(loginFragment);
        }

        @Override
        public void injectPhoneNumberVerificationFragment(
            PhoneNumberVerificationFragment phoneNumberVerificationFragment) {
        }

        @Override
        public void injectSignUpFragment(SignUpFragment signUpFragment) {
          injectSignUpFragment2(signUpFragment);
        }

        @Override
        public void injectDashboardFragment(DashboardFragment dashboardFragment) {
          injectDashboardFragment2(dashboardFragment);
        }

        @Override
        public void injectPatientDashboardFragment(
            PatientDashboardFragment patientDashboardFragment) {
          injectPatientDashboardFragment2(patientDashboardFragment);
        }

        @Override
        public void injectDiagnosisFragmentStep1(DiagnosisFragmentStep1 diagnosisFragmentStep1) {
          injectDiagnosisFragmentStep12(diagnosisFragmentStep1);
        }

        @Override
        public void injectDiagnosisFragmentStep2(DiagnosisFragmentStep2 diagnosisFragmentStep2) {
        }

        @Override
        public void injectDiagnosisFragmentStep3(DiagnosisFragmentStep3 diagnosisFragmentStep3) {
        }

        @Override
        public void injectDiagnosisFragmentStep4(DiagnosisFragmentStep4 diagnosisFragmentStep4) {
        }

        @Override
        public void injectForgotPasswordFragment(ForgotPasswordFragment forgotPasswordFragment) {
        }

        @Override
        public void injectChangePasswordFragment(ChangePasswordFragment changePasswordFragment) {
        }

        @Override
        public void injectEditProfileFragment(EditProfileFragment editProfileFragment) {
        }

        @Override
        public void injectGetProfileFragment(GetProfileFragment getProfileFragment) {
        }

        @Override
        public void injectProfileMenuFragment(ProfileMenuFragment profileMenuFragment) {
        }

        @Override
        public void injectSettingFragment(SettingFragment settingFragment) {
          injectSettingFragment2(settingFragment);
        }

        @Override
        public void injectWebViewFragment(WebViewFragment webViewFragment) {
        }

        @Override
        public void injectSyncHealthDataFragment(SyncHealthDataFragment syncHealthDataFragment) {
        }

        @Override
        public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
          return ActivityCImpl.this.getHiltInternalFactoryFactory();
        }

        @Override
        public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
          return new ViewWithFragmentCBuilder();
        }

        @CanIgnoreReturnValue
        private LoginFragment injectLoginFragment2(LoginFragment instance) {
          LoginFragment_MembersInjector.injectNetworkHelper(instance, DaggerAppCardioPatient_HiltComponents_SingletonC.this.networkHelper());
          return instance;
        }

        @CanIgnoreReturnValue
        private SignUpFragment injectSignUpFragment2(SignUpFragment instance) {
          SignUpFragment_MembersInjector.injectNetworkHelper(instance, DaggerAppCardioPatient_HiltComponents_SingletonC.this.networkHelper());
          return instance;
        }

        @CanIgnoreReturnValue
        private DashboardFragment injectDashboardFragment2(DashboardFragment instance) {
          DashboardFragment_MembersInjector.injectWeightGraph(instance, weightGraph());
          DashboardFragment_MembersInjector.injectStepCountGraph(instance, stepCountGraph());
          DashboardFragment_MembersInjector.injectHeartRateGraph(instance, heartRateGraph());
          DashboardFragment_MembersInjector.injectUserManager(instance, DaggerAppCardioPatient_HiltComponents_SingletonC.this.userManager());
          DashboardFragment_MembersInjector.injectBpGraph(instance, bpGraph());
          return instance;
        }

        @CanIgnoreReturnValue
        private PatientDashboardFragment injectPatientDashboardFragment2(
            PatientDashboardFragment instance) {
          PatientDashboardFragment_MembersInjector.injectUserManager(instance, DaggerAppCardioPatient_HiltComponents_SingletonC.this.userManager());
          return instance;
        }

        @CanIgnoreReturnValue
        private DiagnosisFragmentStep1 injectDiagnosisFragmentStep12(
            DiagnosisFragmentStep1 instance) {
          DiagnosisFragmentStep1_MembersInjector.injectLabelVisiblityHelper(instance, new LabelVisiblityHelper());
          return instance;
        }

        @CanIgnoreReturnValue
        private SettingFragment injectSettingFragment2(SettingFragment instance) {
          SettingFragment_MembersInjector.injectNetworkHelper(instance, DaggerAppCardioPatient_HiltComponents_SingletonC.this.networkHelper());
          SettingFragment_MembersInjector.injectUserManager(instance, DaggerAppCardioPatient_HiltComponents_SingletonC.this.userManager());
          return instance;
        }

        private final class ViewWithFragmentCBuilder implements AppCardioPatient_HiltComponents.ViewWithFragmentC.Builder {
          private View view;

          @Override
          public ViewWithFragmentCBuilder view(View view) {
            this.view = Preconditions.checkNotNull(view);
            return this;
          }

          @Override
          public AppCardioPatient_HiltComponents.ViewWithFragmentC build() {
            Preconditions.checkBuilderRequirement(view, View.class);
            return new ViewWithFragmentCI(view);
          }
        }

        private final class ViewWithFragmentCI extends AppCardioPatient_HiltComponents.ViewWithFragmentC {
          private ViewWithFragmentCI(View view) {

          }
        }
      }

      private final class ViewCBuilder implements AppCardioPatient_HiltComponents.ViewC.Builder {
        private View view;

        @Override
        public ViewCBuilder view(View view) {
          this.view = Preconditions.checkNotNull(view);
          return this;
        }

        @Override
        public AppCardioPatient_HiltComponents.ViewC build() {
          Preconditions.checkBuilderRequirement(view, View.class);
          return new ViewCI(view);
        }
      }

      private final class ViewCI extends AppCardioPatient_HiltComponents.ViewC {
        private ViewCI(View view) {

        }
      }
    }

    private final class ViewModelCBuilder implements AppCardioPatient_HiltComponents.ViewModelC.Builder {
      private SavedStateHandle savedStateHandle;

      @Override
      public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
        this.savedStateHandle = Preconditions.checkNotNull(handle);
        return this;
      }

      @Override
      public AppCardioPatient_HiltComponents.ViewModelC build() {
        Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
        return new ViewModelCImpl(savedStateHandle);
      }
    }

    private final class ViewModelCImpl extends AppCardioPatient_HiltComponents.ViewModelC {
      private volatile Provider<AddPatientViewModel> addPatientViewModelProvider;

      private volatile Provider<BaseAuthViewModel> baseAuthViewModelProvider;

      private volatile Provider<ChangeEmailViewModel> changeEmailViewModelProvider;

      private volatile Provider<ChangePasswordViewModel> changePasswordViewModelProvider;

      private volatile Provider<DashboardViewModel> dashboardViewModelProvider;

      private volatile Provider<DiagnosisActivityViewModel> diagnosisActivityViewModelProvider;

      private volatile Provider<DiagnosisFragmentStep3ViewModel> diagnosisFragmentStep3ViewModelProvider;

      private volatile Provider<DiagnosisFragmentStep4ViewModel> diagnosisFragmentStep4ViewModelProvider;

      private volatile Provider<DiagnosisStep2ViewModel> diagnosisStep2ViewModelProvider;

      private volatile Provider<DiagnosisViewStep1ViewModel> diagnosisViewStep1ViewModelProvider;

      private volatile Provider<EditUserProfileViewModel> editUserProfileViewModelProvider;

      private volatile Provider<ForgotPasswordViewModel> forgotPasswordViewModelProvider;

      private volatile Provider<HealthLogsViewModel> healthLogsViewModelProvider;

      private volatile Provider<LoginViewModel> loginViewModelProvider;

      private volatile Provider<NotificatonsViewModel> notificatonsViewModelProvider;

      private volatile Provider<PhoneVerificationViewModel> phoneVerificationViewModelProvider;

      private volatile Provider<SettingViewModel> settingViewModelProvider;

      private volatile Provider<SignUpViewModel> signUpViewModelProvider;

      private volatile Provider<SyncHealthViewModel> syncHealthViewModelProvider;

      private volatile Provider<UserProfileViewModel> userProfileViewModelProvider;

      private ViewModelCImpl(SavedStateHandle savedStateHandle) {

      }

      private FcmManager fcmManager() {
        return new FcmManager(ApplicationContextModule_ProvideContextFactory.provideContext(DaggerAppCardioPatient_HiltComponents_SingletonC.this.applicationContextModule), DaggerAppCardioPatient_HiltComponents_SingletonC.this.firebaseAuth(), DaggerAppCardioPatient_HiltComponents_SingletonC.this.okHttpClient(), DaggerAppCardioPatient_HiltComponents_SingletonC.this.executorService(), DaggerAppCardioPatient_HiltComponents_SingletonC.this.userManager(), DaggerAppCardioPatient_HiltComponents_SingletonC.this.connectionRepo());
      }

      private AddPatientRepositoryImp addPatientRepositoryImp() {
        return new AddPatientRepositoryImp(DaggerAppCardioPatient_HiltComponents_SingletonC.this.firebaseAuth(), DaggerAppCardioPatient_HiltComponents_SingletonC.this.firebaseFirestore(), DaggerAppCardioPatient_HiltComponents_SingletonC.this.storageReference(), fcmManager(), DaggerAppCardioPatient_HiltComponents_SingletonC.this.userManager(), DaggerAppCardioPatient_HiltComponents_SingletonC.this.apiService());
      }

      private AddPatientViewModel addPatientViewModel() {
        return new AddPatientViewModel(DaggerAppCardioPatient_HiltComponents_SingletonC.this.userManager(), addPatientRepositoryImp(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerAppCardioPatient_HiltComponents_SingletonC.this.applicationContextModule));
      }

      private Provider<AddPatientViewModel> addPatientViewModelProvider() {
        Object local = addPatientViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(0);
          addPatientViewModelProvider = (Provider<AddPatientViewModel>) local;
        }
        return (Provider<AddPatientViewModel>) local;
      }

      private BaseAuthViewModel baseAuthViewModel() {
        return new BaseAuthViewModel(DaggerAppCardioPatient_HiltComponents_SingletonC.this.userManager(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerAppCardioPatient_HiltComponents_SingletonC.this.applicationContextModule));
      }

      private Provider<BaseAuthViewModel> baseAuthViewModelProvider() {
        Object local = baseAuthViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(1);
          baseAuthViewModelProvider = (Provider<BaseAuthViewModel>) local;
        }
        return (Provider<BaseAuthViewModel>) local;
      }

      private ChangeEmailViewModel changeEmailViewModel() {
        return new ChangeEmailViewModel(DaggerAppCardioPatient_HiltComponents_SingletonC.this.userManager(), DaggerAppCardioPatient_HiltComponents_SingletonC.this.userAuthRepositary(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerAppCardioPatient_HiltComponents_SingletonC.this.applicationContextModule));
      }

      private Provider<ChangeEmailViewModel> changeEmailViewModelProvider() {
        Object local = changeEmailViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(2);
          changeEmailViewModelProvider = (Provider<ChangeEmailViewModel>) local;
        }
        return (Provider<ChangeEmailViewModel>) local;
      }

      private ChangePasswordRepository changePasswordRepository() {
        return new ChangePasswordRepository(DaggerAppCardioPatient_HiltComponents_SingletonC.this.firebaseAuth(), DaggerAppCardioPatient_HiltComponents_SingletonC.this.firebaseFirestore(), DaggerAppCardioPatient_HiltComponents_SingletonC.this.storageReference(), DaggerAppCardioPatient_HiltComponents_SingletonC.this.apiService());
      }

      private ChangePasswordViewModel changePasswordViewModel() {
        return new ChangePasswordViewModel(DaggerAppCardioPatient_HiltComponents_SingletonC.this.userManager(), changePasswordRepository(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerAppCardioPatient_HiltComponents_SingletonC.this.applicationContextModule));
      }

      private Provider<ChangePasswordViewModel> changePasswordViewModelProvider() {
        Object local = changePasswordViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(3);
          changePasswordViewModelProvider = (Provider<ChangePasswordViewModel>) local;
        }
        return (Provider<ChangePasswordViewModel>) local;
      }

      private UserProfileRepository userProfileRepository() {
        return new UserProfileRepository(DaggerAppCardioPatient_HiltComponents_SingletonC.this.firebaseAuth(), DaggerAppCardioPatient_HiltComponents_SingletonC.this.firebaseFirestore(), DaggerAppCardioPatient_HiltComponents_SingletonC.this.storageReference(), DaggerAppCardioPatient_HiltComponents_SingletonC.this.apiService());
      }

      private DashboardViewModel dashboardViewModel() {
        return new DashboardViewModel(DaggerAppCardioPatient_HiltComponents_SingletonC.this.diagnosisRepo(), userProfileRepository(), DaggerAppCardioPatient_HiltComponents_SingletonC.this.syncHealthRepositary());
      }

      private Provider<DashboardViewModel> dashboardViewModelProvider() {
        Object local = dashboardViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(4);
          dashboardViewModelProvider = (Provider<DashboardViewModel>) local;
        }
        return (Provider<DashboardViewModel>) local;
      }

      private Provider<DiagnosisActivityViewModel> diagnosisActivityViewModelProvider() {
        Object local = diagnosisActivityViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(5);
          diagnosisActivityViewModelProvider = (Provider<DiagnosisActivityViewModel>) local;
        }
        return (Provider<DiagnosisActivityViewModel>) local;
      }

      private DiagnosisFragmentStep3ViewModel diagnosisFragmentStep3ViewModel() {
        return new DiagnosisFragmentStep3ViewModel(DaggerAppCardioPatient_HiltComponents_SingletonC.this.questionnaireRepo(), DaggerAppCardioPatient_HiltComponents_SingletonC.this.diagnosisRepo(), DaggerAppCardioPatient_HiltComponents_SingletonC.this.connectionRepo(), DaggerAppCardioPatient_HiltComponents_SingletonC.this.notificationRepo());
      }

      private Provider<DiagnosisFragmentStep3ViewModel> diagnosisFragmentStep3ViewModelProvider() {
        Object local = diagnosisFragmentStep3ViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(6);
          diagnosisFragmentStep3ViewModelProvider = (Provider<DiagnosisFragmentStep3ViewModel>) local;
        }
        return (Provider<DiagnosisFragmentStep3ViewModel>) local;
      }

      private DiagnosisFragmentStep4ViewModel diagnosisFragmentStep4ViewModel() {
        return new DiagnosisFragmentStep4ViewModel(DaggerAppCardioPatient_HiltComponents_SingletonC.this.diagnosisRepo(), DaggerAppCardioPatient_HiltComponents_SingletonC.this.connectionRepo(), DaggerAppCardioPatient_HiltComponents_SingletonC.this.notificationRepo());
      }

      private Provider<DiagnosisFragmentStep4ViewModel> diagnosisFragmentStep4ViewModelProvider() {
        Object local = diagnosisFragmentStep4ViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(7);
          diagnosisFragmentStep4ViewModelProvider = (Provider<DiagnosisFragmentStep4ViewModel>) local;
        }
        return (Provider<DiagnosisFragmentStep4ViewModel>) local;
      }

      private DiagnosisStep2ViewModel diagnosisStep2ViewModel() {
        return new DiagnosisStep2ViewModel(DaggerAppCardioPatient_HiltComponents_SingletonC.this.diagnosisRepo(), DaggerAppCardioPatient_HiltComponents_SingletonC.this.connectionRepo(), DaggerAppCardioPatient_HiltComponents_SingletonC.this.notificationRepo());
      }

      private Provider<DiagnosisStep2ViewModel> diagnosisStep2ViewModelProvider() {
        Object local = diagnosisStep2ViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(8);
          diagnosisStep2ViewModelProvider = (Provider<DiagnosisStep2ViewModel>) local;
        }
        return (Provider<DiagnosisStep2ViewModel>) local;
      }

      private DiagnosisViewStep1ViewModel diagnosisViewStep1ViewModel() {
        return new DiagnosisViewStep1ViewModel(DaggerAppCardioPatient_HiltComponents_SingletonC.this.namedValidater(), DaggerAppCardioPatient_HiltComponents_SingletonC.this.namedValidater2(), userProfileRepository(), DaggerAppCardioPatient_HiltComponents_SingletonC.this.diagnosisRepo(), DaggerAppCardioPatient_HiltComponents_SingletonC.this.connectionRepo(), DaggerAppCardioPatient_HiltComponents_SingletonC.this.notificationRepo());
      }

      private Provider<DiagnosisViewStep1ViewModel> diagnosisViewStep1ViewModelProvider() {
        Object local = diagnosisViewStep1ViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(9);
          diagnosisViewStep1ViewModelProvider = (Provider<DiagnosisViewStep1ViewModel>) local;
        }
        return (Provider<DiagnosisViewStep1ViewModel>) local;
      }

      private EditUserProfileViewModel editUserProfileViewModel() {
        return new EditUserProfileViewModel(DaggerAppCardioPatient_HiltComponents_SingletonC.this.userManager(), userProfileRepository(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerAppCardioPatient_HiltComponents_SingletonC.this.applicationContextModule), DaggerAppCardioPatient_HiltComponents_SingletonC.this.networkHelper());
      }

      private Provider<EditUserProfileViewModel> editUserProfileViewModelProvider() {
        Object local = editUserProfileViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(10);
          editUserProfileViewModelProvider = (Provider<EditUserProfileViewModel>) local;
        }
        return (Provider<EditUserProfileViewModel>) local;
      }

      private BaseRepository baseRepository() {
        return new BaseRepository(DaggerAppCardioPatient_HiltComponents_SingletonC.this.firebaseAuth(), DaggerAppCardioPatient_HiltComponents_SingletonC.this.firebaseFirestore(), DaggerAppCardioPatient_HiltComponents_SingletonC.this.storageReference(), DaggerAppCardioPatient_HiltComponents_SingletonC.this.apiService());
      }

      private ForgotPasswordViewModel forgotPasswordViewModel() {
        return new ForgotPasswordViewModel(DaggerAppCardioPatient_HiltComponents_SingletonC.this.userManager(), baseRepository(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerAppCardioPatient_HiltComponents_SingletonC.this.applicationContextModule));
      }

      private Provider<ForgotPasswordViewModel> forgotPasswordViewModelProvider() {
        Object local = forgotPasswordViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(11);
          forgotPasswordViewModelProvider = (Provider<ForgotPasswordViewModel>) local;
        }
        return (Provider<ForgotPasswordViewModel>) local;
      }

      private HealthLogsViewModel healthLogsViewModel() {
        return new HealthLogsViewModel(DaggerAppCardioPatient_HiltComponents_SingletonC.this.syncHealthRepositary(), DaggerAppCardioPatient_HiltComponents_SingletonC.this.userAuthRepositary());
      }

      private Provider<HealthLogsViewModel> healthLogsViewModelProvider() {
        Object local = healthLogsViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(12);
          healthLogsViewModelProvider = (Provider<HealthLogsViewModel>) local;
        }
        return (Provider<HealthLogsViewModel>) local;
      }

      private LoginViewModel loginViewModel() {
        return new LoginViewModel(DaggerAppCardioPatient_HiltComponents_SingletonC.this.userManager(), DaggerAppCardioPatient_HiltComponents_SingletonC.this.loginRepositary(), userProfileRepository(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerAppCardioPatient_HiltComponents_SingletonC.this.applicationContextModule));
      }

      private Provider<LoginViewModel> loginViewModelProvider() {
        Object local = loginViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(13);
          loginViewModelProvider = (Provider<LoginViewModel>) local;
        }
        return (Provider<LoginViewModel>) local;
      }

      private NotificatonsViewModel notificatonsViewModel() {
        return new NotificatonsViewModel(DaggerAppCardioPatient_HiltComponents_SingletonC.this.notificationRepo());
      }

      private Provider<NotificatonsViewModel> notificatonsViewModelProvider() {
        Object local = notificatonsViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(14);
          notificatonsViewModelProvider = (Provider<NotificatonsViewModel>) local;
        }
        return (Provider<NotificatonsViewModel>) local;
      }

      private PhoneVerificationRepository phoneVerificationRepository() {
        return new PhoneVerificationRepository(DaggerAppCardioPatient_HiltComponents_SingletonC.this.firebaseAuth(), DaggerAppCardioPatient_HiltComponents_SingletonC.this.firebaseFirestore(), DaggerAppCardioPatient_HiltComponents_SingletonC.this.storageReference(), DaggerAppCardioPatient_HiltComponents_SingletonC.this.apiService());
      }

      private PhoneVerificationViewModel phoneVerificationViewModel() {
        return new PhoneVerificationViewModel(DaggerAppCardioPatient_HiltComponents_SingletonC.this.userManager(), userProfileRepository(), phoneVerificationRepository(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerAppCardioPatient_HiltComponents_SingletonC.this.applicationContextModule));
      }

      private Provider<PhoneVerificationViewModel> phoneVerificationViewModelProvider() {
        Object local = phoneVerificationViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(15);
          phoneVerificationViewModelProvider = (Provider<PhoneVerificationViewModel>) local;
        }
        return (Provider<PhoneVerificationViewModel>) local;
      }

      private SettingViewModel settingViewModel() {
        return new SettingViewModel(DaggerAppCardioPatient_HiltComponents_SingletonC.this.namedFitnessRepositary());
      }

      private Provider<SettingViewModel> settingViewModelProvider() {
        Object local = settingViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(16);
          settingViewModelProvider = (Provider<SettingViewModel>) local;
        }
        return (Provider<SettingViewModel>) local;
      }

      private SignUpRepository signUpRepository() {
        return new SignUpRepository(DaggerAppCardioPatient_HiltComponents_SingletonC.this.firebaseAuth(), DaggerAppCardioPatient_HiltComponents_SingletonC.this.firebaseFirestore(), DaggerAppCardioPatient_HiltComponents_SingletonC.this.storageReference(), DaggerAppCardioPatient_HiltComponents_SingletonC.this.apiService());
      }

      private SignUpViewModel signUpViewModel() {
        return new SignUpViewModel(DaggerAppCardioPatient_HiltComponents_SingletonC.this.userManager(), signUpRepository(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerAppCardioPatient_HiltComponents_SingletonC.this.applicationContextModule), DaggerAppCardioPatient_HiltComponents_SingletonC.this.networkHelper());
      }

      private Provider<SignUpViewModel> signUpViewModelProvider() {
        Object local = signUpViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(17);
          signUpViewModelProvider = (Provider<SignUpViewModel>) local;
        }
        return (Provider<SignUpViewModel>) local;
      }

      private SyncHealthViewModel syncHealthViewModel() {
        return new SyncHealthViewModel(DaggerAppCardioPatient_HiltComponents_SingletonC.this.userManager(), DaggerAppCardioPatient_HiltComponents_SingletonC.this.namedFitnessRepositary(), DaggerAppCardioPatient_HiltComponents_SingletonC.this.namedFitnessRepositary2(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerAppCardioPatient_HiltComponents_SingletonC.this.applicationContextModule));
      }

      private Provider<SyncHealthViewModel> syncHealthViewModelProvider() {
        Object local = syncHealthViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(18);
          syncHealthViewModelProvider = (Provider<SyncHealthViewModel>) local;
        }
        return (Provider<SyncHealthViewModel>) local;
      }

      private UserProfileViewModel userProfileViewModel() {
        return new UserProfileViewModel(DaggerAppCardioPatient_HiltComponents_SingletonC.this.userManager(), userProfileRepository(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerAppCardioPatient_HiltComponents_SingletonC.this.applicationContextModule), DaggerAppCardioPatient_HiltComponents_SingletonC.this.networkHelper());
      }

      private Provider<UserProfileViewModel> userProfileViewModelProvider() {
        Object local = userProfileViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(19);
          userProfileViewModelProvider = (Provider<UserProfileViewModel>) local;
        }
        return (Provider<UserProfileViewModel>) local;
      }

      @Override
      public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
        return ImmutableMap.<String, Provider<ViewModel>>builderWithExpectedSize(20).put("com.cardio.physician.ui.views.add_patient.AddPatientViewModel", (Provider) addPatientViewModelProvider()).put("com.cardio.physician.ui.common.base.viewmodel.BaseAuthViewModel", (Provider) baseAuthViewModelProvider()).put("com.cardio.physician.ui.views.change_email.ChangeEmailViewModel", (Provider) changeEmailViewModelProvider()).put("com.cardio.physician.ui.views.profile.change_password.ChangePasswordViewModel", (Provider) changePasswordViewModelProvider()).put("com.cardio.physician.ui.views.dashboard.fragment.DashboardViewModel", (Provider) dashboardViewModelProvider()).put("com.cardio.physician.ui.views.diagnosis.DiagnosisActivityViewModel", (Provider) diagnosisActivityViewModelProvider()).put("com.cardio.physician.ui.views.diagnosis.step3.DiagnosisFragmentStep3ViewModel", (Provider) diagnosisFragmentStep3ViewModelProvider()).put("com.cardio.physician.ui.views.diagnosis.step4.DiagnosisFragmentStep4ViewModel", (Provider) diagnosisFragmentStep4ViewModelProvider()).put("com.cardio.physician.ui.views.diagnosis.step2.DiagnosisStep2ViewModel", (Provider) diagnosisStep2ViewModelProvider()).put("com.cardio.physician.ui.views.diagnosis.step1.DiagnosisViewStep1ViewModel", (Provider) diagnosisViewStep1ViewModelProvider()).put("com.cardio.physician.ui.views.profile.editprofile.EditUserProfileViewModel", (Provider) editUserProfileViewModelProvider()).put("com.cardio.physician.ui.views.forgot_password.ForgotPasswordViewModel", (Provider) forgotPasswordViewModelProvider()).put("com.cardio.physician.ui.views.healthlogs.HealthLogsViewModel", (Provider) healthLogsViewModelProvider()).put("com.cardio.physician.ui.views.auth.login.LoginViewModel", (Provider) loginViewModelProvider()).put("com.cardio.physician.ui.views.notifications.NotificatonsViewModel", (Provider) notificatonsViewModelProvider()).put("com.cardio.physician.ui.views.auth.phone_verification.PhoneVerificationViewModel", (Provider) phoneVerificationViewModelProvider()).put("com.cardio.physician.ui.views.profile.setting.SettingViewModel", (Provider) settingViewModelProvider()).put("com.cardio.physician.ui.views.auth.signup.SignUpViewModel", (Provider) signUpViewModelProvider()).put("com.cardio.physician.ui.views.sync_health_data.SyncHealthViewModel", (Provider) syncHealthViewModelProvider()).put("com.cardio.physician.ui.views.profile.profile.UserProfileViewModel", (Provider) userProfileViewModelProvider()).build();
      }

      private final class SwitchingProvider<T> implements Provider<T> {
        private final int id;

        SwitchingProvider(int id) {
          this.id = id;
        }

        @SuppressWarnings("unchecked")
        @Override
        public T get() {
          switch (id) {
            case 0: // com.cardio.physician.ui.views.add_patient.AddPatientViewModel 
            return (T) ViewModelCImpl.this.addPatientViewModel();

            case 1: // com.cardio.physician.ui.common.base.viewmodel.BaseAuthViewModel 
            return (T) ViewModelCImpl.this.baseAuthViewModel();

            case 2: // com.cardio.physician.ui.views.change_email.ChangeEmailViewModel 
            return (T) ViewModelCImpl.this.changeEmailViewModel();

            case 3: // com.cardio.physician.ui.views.profile.change_password.ChangePasswordViewModel 
            return (T) ViewModelCImpl.this.changePasswordViewModel();

            case 4: // com.cardio.physician.ui.views.dashboard.fragment.DashboardViewModel 
            return (T) ViewModelCImpl.this.dashboardViewModel();

            case 5: // com.cardio.physician.ui.views.diagnosis.DiagnosisActivityViewModel 
            return (T) new DiagnosisActivityViewModel();

            case 6: // com.cardio.physician.ui.views.diagnosis.step3.DiagnosisFragmentStep3ViewModel 
            return (T) ViewModelCImpl.this.diagnosisFragmentStep3ViewModel();

            case 7: // com.cardio.physician.ui.views.diagnosis.step4.DiagnosisFragmentStep4ViewModel 
            return (T) ViewModelCImpl.this.diagnosisFragmentStep4ViewModel();

            case 8: // com.cardio.physician.ui.views.diagnosis.step2.DiagnosisStep2ViewModel 
            return (T) ViewModelCImpl.this.diagnosisStep2ViewModel();

            case 9: // com.cardio.physician.ui.views.diagnosis.step1.DiagnosisViewStep1ViewModel 
            return (T) ViewModelCImpl.this.diagnosisViewStep1ViewModel();

            case 10: // com.cardio.physician.ui.views.profile.editprofile.EditUserProfileViewModel 
            return (T) ViewModelCImpl.this.editUserProfileViewModel();

            case 11: // com.cardio.physician.ui.views.forgot_password.ForgotPasswordViewModel 
            return (T) ViewModelCImpl.this.forgotPasswordViewModel();

            case 12: // com.cardio.physician.ui.views.healthlogs.HealthLogsViewModel 
            return (T) ViewModelCImpl.this.healthLogsViewModel();

            case 13: // com.cardio.physician.ui.views.auth.login.LoginViewModel 
            return (T) ViewModelCImpl.this.loginViewModel();

            case 14: // com.cardio.physician.ui.views.notifications.NotificatonsViewModel 
            return (T) ViewModelCImpl.this.notificatonsViewModel();

            case 15: // com.cardio.physician.ui.views.auth.phone_verification.PhoneVerificationViewModel 
            return (T) ViewModelCImpl.this.phoneVerificationViewModel();

            case 16: // com.cardio.physician.ui.views.profile.setting.SettingViewModel 
            return (T) ViewModelCImpl.this.settingViewModel();

            case 17: // com.cardio.physician.ui.views.auth.signup.SignUpViewModel 
            return (T) ViewModelCImpl.this.signUpViewModel();

            case 18: // com.cardio.physician.ui.views.sync_health_data.SyncHealthViewModel 
            return (T) ViewModelCImpl.this.syncHealthViewModel();

            case 19: // com.cardio.physician.ui.views.profile.profile.UserProfileViewModel 
            return (T) ViewModelCImpl.this.userProfileViewModel();

            default: throw new AssertionError(id);
          }
        }
      }
    }
  }

  private final class ServiceCBuilder implements AppCardioPatient_HiltComponents.ServiceC.Builder {
    private Service service;

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public AppCardioPatient_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(new ServiceModule(), service);
    }
  }

  private final class ServiceCImpl extends AppCardioPatient_HiltComponents.ServiceC {
    private final ServiceModule serviceModule;

    private final Service service;

    private volatile Object syncHealthServiceFacade = new MemoizedSentinel();

    private ServiceCImpl(ServiceModule serviceModuleParam, Service serviceParam) {
      this.serviceModule = serviceModuleParam;
      this.service = serviceParam;
    }

    private SyncHealthServiceFacade syncHealthServiceFacade() {
      Object local = syncHealthServiceFacade;
      if (local instanceof MemoizedSentinel) {
        synchronized (local) {
          local = syncHealthServiceFacade;
          if (local instanceof MemoizedSentinel) {
            local = ServiceModule_ProvideServiceFacadeFactory.provideServiceFacade(serviceModule, service, DaggerAppCardioPatient_HiltComponents_SingletonC.this.namedFitnessRepositary3(), DaggerAppCardioPatient_HiltComponents_SingletonC.this.syncHealthRepositary());
            syncHealthServiceFacade = DoubleCheck.reentrantCheck(syncHealthServiceFacade, local);
          }
        }
      }
      return (SyncHealthServiceFacade) local;
    }

    @Override
    public void injectSyncHeathDataService(SyncHeathDataService syncHeathDataService) {
      injectSyncHeathDataService2(syncHeathDataService);
    }

    @CanIgnoreReturnValue
    private SyncHeathDataService injectSyncHeathDataService2(SyncHeathDataService instance) {
      SyncHeathDataService_MembersInjector.injectFacade(instance, syncHealthServiceFacade());
      return instance;
    }
  }
}
