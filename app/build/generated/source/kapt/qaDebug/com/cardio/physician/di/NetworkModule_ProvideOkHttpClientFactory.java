// Generated by Dagger (https://dagger.dev).
package com.cardio.physician.di;

import com.cardio.physician.data.local.UserManager;
import com.cardio.physician.network.InternetInterceptor;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvideOkHttpClientFactory implements Factory<OkHttpClient> {
  private final NetworkModule module;

  private final Provider<UserManager> userManagerProvider;

  private final Provider<InternetInterceptor> internetInterceptorProvider;

  public NetworkModule_ProvideOkHttpClientFactory(NetworkModule module,
      Provider<UserManager> userManagerProvider,
      Provider<InternetInterceptor> internetInterceptorProvider) {
    this.module = module;
    this.userManagerProvider = userManagerProvider;
    this.internetInterceptorProvider = internetInterceptorProvider;
  }

  @Override
  public OkHttpClient get() {
    return provideOkHttpClient(module, userManagerProvider.get(), internetInterceptorProvider.get());
  }

  public static NetworkModule_ProvideOkHttpClientFactory create(NetworkModule module,
      Provider<UserManager> userManagerProvider,
      Provider<InternetInterceptor> internetInterceptorProvider) {
    return new NetworkModule_ProvideOkHttpClientFactory(module, userManagerProvider, internetInterceptorProvider);
  }

  public static OkHttpClient provideOkHttpClient(NetworkModule instance, UserManager userManager,
      InternetInterceptor internetInterceptor) {
    return Preconditions.checkNotNullFromProvides(instance.provideOkHttpClient(userManager, internetInterceptor));
  }
}
