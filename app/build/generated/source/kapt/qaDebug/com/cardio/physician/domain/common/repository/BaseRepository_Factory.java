// Generated by Dagger (https://dagger.dev).
package com.cardio.physician.domain.common.repository;

import com.cardio.physician.network.api.ApiService;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.storage.StorageReference;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class BaseRepository_Factory implements Factory<BaseRepository> {
  private final Provider<FirebaseAuth> firebaseAuthProvider;

  private final Provider<FirebaseFirestore> fireStoreProvider;

  private final Provider<StorageReference> storageReferenceProvider;

  private final Provider<ApiService> apiServiceProvider;

  public BaseRepository_Factory(Provider<FirebaseAuth> firebaseAuthProvider,
      Provider<FirebaseFirestore> fireStoreProvider,
      Provider<StorageReference> storageReferenceProvider,
      Provider<ApiService> apiServiceProvider) {
    this.firebaseAuthProvider = firebaseAuthProvider;
    this.fireStoreProvider = fireStoreProvider;
    this.storageReferenceProvider = storageReferenceProvider;
    this.apiServiceProvider = apiServiceProvider;
  }

  @Override
  public BaseRepository get() {
    return newInstance(firebaseAuthProvider.get(), fireStoreProvider.get(), storageReferenceProvider.get(), apiServiceProvider.get());
  }

  public static BaseRepository_Factory create(Provider<FirebaseAuth> firebaseAuthProvider,
      Provider<FirebaseFirestore> fireStoreProvider,
      Provider<StorageReference> storageReferenceProvider,
      Provider<ApiService> apiServiceProvider) {
    return new BaseRepository_Factory(firebaseAuthProvider, fireStoreProvider, storageReferenceProvider, apiServiceProvider);
  }

  public static BaseRepository newInstance(FirebaseAuth firebaseAuth, FirebaseFirestore fireStore,
      StorageReference storageReference, ApiService apiService) {
    return new BaseRepository(firebaseAuth, fireStore, storageReference, apiService);
  }
}
