// Generated by Dagger (https://dagger.dev).
package com.cardio.physician.di;

import com.cardio.physician.data.remote.common.repositary.UserAuthRepositaryImp;
import com.cardio.physician.domain.common.repository.UserAuthRepositary;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RepositaryModule_ProvideUserAuthRepoFactory implements Factory<UserAuthRepositary> {
  private final RepositaryModule module;

  private final Provider<UserAuthRepositaryImp> userAuthRepositaryImpProvider;

  public RepositaryModule_ProvideUserAuthRepoFactory(RepositaryModule module,
      Provider<UserAuthRepositaryImp> userAuthRepositaryImpProvider) {
    this.module = module;
    this.userAuthRepositaryImpProvider = userAuthRepositaryImpProvider;
  }

  @Override
  public UserAuthRepositary get() {
    return provideUserAuthRepo(module, userAuthRepositaryImpProvider.get());
  }

  public static RepositaryModule_ProvideUserAuthRepoFactory create(RepositaryModule module,
      Provider<UserAuthRepositaryImp> userAuthRepositaryImpProvider) {
    return new RepositaryModule_ProvideUserAuthRepoFactory(module, userAuthRepositaryImpProvider);
  }

  public static UserAuthRepositary provideUserAuthRepo(RepositaryModule instance,
      UserAuthRepositaryImp userAuthRepositaryImp) {
    return Preconditions.checkNotNullFromProvides(instance.provideUserAuthRepo(userAuthRepositaryImp));
  }
}
