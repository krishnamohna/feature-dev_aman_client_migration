// Generated by Dagger (https://dagger.dev).
package com.cardio.physician.data.remote.notifications;

import com.cardio.physician.data.local.UserManager;
import com.cardio.physician.data.remote.fcm.FcmManager;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.firestore.FirebaseFirestore;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NotificationsRepoImp_Factory implements Factory<NotificationsRepoImp> {
  private final Provider<FirebaseFirestore> fireStoreDbProvider;

  private final Provider<FirebaseAuth> firebaseAuthProvider;

  private final Provider<FcmManager> fcmManagerProvider;

  private final Provider<UserManager> userManagerProvider;

  public NotificationsRepoImp_Factory(Provider<FirebaseFirestore> fireStoreDbProvider,
      Provider<FirebaseAuth> firebaseAuthProvider, Provider<FcmManager> fcmManagerProvider,
      Provider<UserManager> userManagerProvider) {
    this.fireStoreDbProvider = fireStoreDbProvider;
    this.firebaseAuthProvider = firebaseAuthProvider;
    this.fcmManagerProvider = fcmManagerProvider;
    this.userManagerProvider = userManagerProvider;
  }

  @Override
  public NotificationsRepoImp get() {
    return newInstance(fireStoreDbProvider.get(), firebaseAuthProvider.get(), fcmManagerProvider.get(), userManagerProvider.get());
  }

  public static NotificationsRepoImp_Factory create(Provider<FirebaseFirestore> fireStoreDbProvider,
      Provider<FirebaseAuth> firebaseAuthProvider, Provider<FcmManager> fcmManagerProvider,
      Provider<UserManager> userManagerProvider) {
    return new NotificationsRepoImp_Factory(fireStoreDbProvider, firebaseAuthProvider, fcmManagerProvider, userManagerProvider);
  }

  public static NotificationsRepoImp newInstance(FirebaseFirestore fireStoreDb,
      FirebaseAuth firebaseAuth, FcmManager fcmManager, UserManager userManager) {
    return new NotificationsRepoImp(fireStoreDb, firebaseAuth, fcmManager, userManager);
  }
}
